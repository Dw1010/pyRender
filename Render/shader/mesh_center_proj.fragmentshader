#version 330 core

in vec2 UV;
in vec3 Mynormal;
in vec3 position;

out vec3 color;

uniform sampler2D myTextureSampler;

void main()
{
	vec3 Mycolor = texture(myTextureSampler, UV).rgb;
	vec3 light_position = vec3(0, 0, -1);
	float distance = length(position - vec3(position.x, position.y, -5.0f));
	vec3 light_direction = vec3(0, 0, 1);
	vec3 LightColor = vec3(1, 1, 1);
	float LightPower = 45f;

	// Material properties
	vec3 MaterialDiffuseColor = Mycolor;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * Mycolor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	float cosTheta = clamp( -dot(Mynormal, light_direction), 0,1 );

	// Eye vector (towards the camera)
	vec3 E = vec3(0, 0, 1);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(light_direction, Mynormal);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	vec3 light_direction_up = vec3(0, 1, 0);
	vec3 light_direction_down = vec3(0, -1, 0);
	vec3 light_direction_left = vec3(1, 0, 0);
	vec3 light_direction_right = vec3(-1, 0, 0);
	float cosComps = 
		clamp( -dot(Mynormal, light_direction_up), 0,1 ) +
		clamp( -dot(Mynormal, light_direction_down), 0,1 ) +
		clamp( -dot(Mynormal, light_direction_left), 0,1 ) +
		clamp( -dot(Mynormal, light_direction_right), 0,1 );

	float light_distence = 12;

	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		5 * MaterialDiffuseColor * LightColor * LightPower * cosTheta / (light_distence * light_distence) + 
		MaterialDiffuseColor * LightColor * LightPower * cosComps / (light_distence * light_distence);


		// Specular : reflective highlight, like a mirror
		// + MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,10) / 0.1;
}
